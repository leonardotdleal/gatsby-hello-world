{"version":3,"sources":["webpack:///./src/templates/posts.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_ref","post","data","markdownRemark","a","createElement","title","frontmatter","style","color","author","fontSize","date","dangerouslySetInnerHTML","__html","html","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","Header","siteTitle","react_default","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","to","textDecoration","Layout","children","_856328897","Helmet_default","header","paddingTop","Date","getFullYear","href"],"mappings":"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","file":"component---src-templates-posts-js-d4c2e368644296276da0.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nexport default ({ data }) => {\n  const post = data.markdownRemark\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div>\n        <h1>{post.frontmatter.title}</h1>\n        <h4 style={{ color: \"rgb(165, 164, 164)\" }}>\n          {post.frontmatter.author}{\" \"}\n          <span style={{ fontSize: \"0.8em\" }}> -{post.frontmatter.date}</span>\n        </h4>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PostQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        author\n        date\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <div>\n      <Helmet title={data.site.siteMetadata.title} />\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}